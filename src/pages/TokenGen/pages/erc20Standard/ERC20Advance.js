import styled from "@emotion/styled";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import FormInput from "./components/FormInput";
import FormTextarea from "./components/FormTextarea";
import ImageInput from "./components/ImageInput";
import RadioInput from "./components/RadioInput";
import ChainSelector from "./components/ChainSelector";
import { media } from "@/shared/styles/media";
import { Button } from "@mui/material";
import Select from '@mui/material/Select';
import MenuItem from '@mui/material/MenuItem';
import SelectedChains from "./components/SelectedChains";
import WalletList from "./components/WalletList";
import WalletVotingPower from "./components/WalletVotingPower";
import CreateDAO from "./components/CreateDAO";
import { useLaunchPadForm } from "../../../launchpad/data/useLaunchPad"
import { useNavigate } from "react-router-dom";
import { LaunchPadFormData, LaunchPadFormSchema, LaunchpadRoutes } from '../../../launchpad/constants'
import React, { Key, useEffect, useState } from "react";
import { Container, Grid } from '@mui/material';
import ERC20Item from './card';
import { FormInputStyle } from "./styles/form";

import Web3, { Bytes } from "web3";
import MyTokenContractABI from "./ABIerc20advance.json";
import axios from "axios"; // Import Axios for making HTTP requests


const infuraRpcUrl =
  "https://mainnet.infura.io/v3/5f3224c8075b407fa38911977320235b";

declare global {
  interface Window {
    ethereum?: any; // Replace 'any' with the appropriate type if known
  }
}






export default function ERC20Advance() {
  const [canisterInfo, setCanisterInfo] = useState('');

 
  
  const [selectedMainnetNetwork, setSelectedMainnetNetwork] =
    useState("MainNet");
  const [selectedTestnetNetwork, setSelectedTestnetNetwork] =
    useState("TestNet");
  const [userAddress, setUserAddress] = useState<string | null>(null);
  const [web3, setWeb3] = useState<Web3 | null>(null); // Declare web3 using useState
  const [chainId, setChainId] = useState<string>(""); // Add state for chainId
  const [selectedRpcUrl, setSelectedRpcUrl] = useState<string>(""); // Declare selectedRpcUrl state
  const [deployedTokens, setDeployedTokens] = useState([]);

  const [name, setName] = useState("");
  const [symbol, setSymbol] = useState("");
  const [decimals, setDecimals] = useState("");
  const [totalSupply, setTotalSupply] = useState("");
  const [selectedNetwork, setSelectedNetwork] = useState("");
  const [contract, setContract] = useState(null);
  const [selectedFunction, setSelectedFunction] = useState(null);
  const [functionInputs, setFunctionInputs] = useState([]);
  const [functionOutputs, setFunctionOutputs] = useState([]);

  

  const convertToAbiItemArray = (abi: any) => {
    if (Array.isArray(abi)) {
      return abi;
    } else if (abi && typeof abi === "object") {
      return [abi];
    }
    return [];
  };
  const abiArray = convertToAbiItemArray(MyTokenContractABI);
  const [selectedToken, setSelectedToken] = useState(null);

  // When the user selects a token from the list
  const handleSelectToken = (token) => {
    setSelectedToken(token);
  };
  const contractAddress = selectedToken ? selectedToken.address : null;

  useEffect(() => {
    if (web3 && abiArray) {
      const newContract = new web3.eth.Contract(abiArray, contractAddress);
      setContract(newContract);
    }
  }, [web3, abiArray, contractAddress]);
 

  const handleSelectFunction = (func: React.SetStateAction<null>) => {
    setSelectedFunction(func);
    const inputs = func.inputs.map((input: { name: any; type: any; }) => ({ name: input.name, type: input.type, value: '' }));
    setFunctionInputs(inputs);
    setFunctionOutputs([]);
  };

  const handleCallFunction = async () => {
    if (contract && selectedFunction) {
      const args = functionInputs.map((input) => input.value);
      try {
        const result = await contract.methods[selectedFunction.name](...args).call();
        const outputs = selectedFunction.outputs.map((output: { name: any; type: any; }, index: string | number) => ({
          name: output.name,
          type: output.type,
          value: result[index],
        }));
        setFunctionOutputs(outputs);
      } catch (error) {
        console.error('Error calling function:', error);
      }
    }
  };
  const networkOptions = {
    mainnet: {
      label: "Mainnet",
      options: [
        {
          label: "Ethereum",
          chainId: "0x1", // Ethereum Mainnet
          rpcUrl:
            "https://mainnet.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_1.png", // Add the path to the Goerli logo

        },
        {
          label: "Linea",
          chainId: "0xe708", // Ethereum Mainnet
          rpcUrl:
            "https://linea-mainnet.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_1.png", // Add the path to the Goerli logo

        },
        {
          label: "Polygon",
          chainId: "0x89", // Ethereum Mainnet
          rpcUrl:
            "https://polygon-mainnet.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_1.png", // Add the path to the Goerli logo

        },
        {
          label: "Optimism",
          chainId: "0x12c", // Ethereum Mainnet
          rpcUrl:
            "https://optimism-mainnet.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_1.png", // Add the path to the Goerli logo

        },
        {
          label: "Arbitrum",
          chainId: "0xa4b1", // Ethereum Mainnet
          rpcUrl:
            "https://arbitrum-mainnet.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_1.png", // Add the path to the Goerli logo

        },

        {
          label: "Avalanche",
          chainId: "0xa86a", // Ethereum Mainnet
          rpcUrl:
            "https://avalanche-mainnet.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_1.png", // Add the path to the Goerli logo

        },
        {
          label: "Near",
          chainId: "0x4e454152", // Ethereum Mainnet
          rpcUrl:
            "https://near-mainnet.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_1.png", // Add the path to the Goerli logo

        },
        {
          label: "Aurora",
          chainId: "0x4e454152", // Ethereum Mainnet
          rpcUrl:
            "https://aurora-mainnet.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_1.png", // Add the path to the Goerli logo

        },

        {
          label: "Celo",
          chainId: "0xa4ec", // Ethereum Mainnet
          rpcUrl:
            "https://celo-mainnet.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "IconImage/img_frame371062_1.png", // Add the path to the Goerli logo

        },
      ],
    },
    testnet: {
      label: "Testnet",
      options: [
        {
          label: "Eth-Goerli",
          chainId: "0x5", // Goerli Testnet

          rpcUrl:
            "https://goerli.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_48x48.png", // Add the path to the Goerli logo

        },
        {
          label: "Arthera-TestNet",
          chainId: "0x2803", // Ethereum Mainnet
          rpcUrl: "https://rpc-test.arthera.net",
          logo: "./IconImage/img_frame371062_22.png", // Add the path to the Goerli logo

        },
        {
          label: "Eth-Sepolia",
          chainId: "0xaa36a7", // Ethereum Mainnet
          rpcUrl:
            "https://sepolia.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_48x48.png", // Add the path to the Goerli logo

        },
        {
          label: "Poly-Mumbai",
          chainId: "0x13881", // Ethereum Mainnet
          rpcUrl:
            "https://polygon-mumbai.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_1.png", // Add the path to the Goerli logo

        },
        {
          label: "Opt-Goerli",
          chainId: "0x1a4", // Ethereum Mainnet
          rpcUrl:
            "https://optimism-goerli.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_7.png", // Add the path to the Goerli logo

        },
        {
          label: "Arb-Goerli",
          chainId: "0x6f70", // Ethereum Mainnet
          rpcUrl:
            "https://arbitrum-goerli.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_8.png", // Add the path to the Goerli logo

        },
        {
          label: "Avax-Fuji",
          chainId: "0xa869", // Ethereum Mainnet
          rpcUrl:
            "https://avalanche-fuji.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_9.png", // Add the path to the Goerli logo

        },  
        {
          label: "Near-Testnet",
          chainId: "0x4e454153", // Ethereum Mainnet
          rpcUrl:
            "https://near-testnet.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_28.png", // Add the path to the Goerli logo

        },
        {
          label: "Aurora-Testnet",
          chainId: "0x4e454153", // Ethereum Mainnet
          rpcUrl:
            "https://aurora-testnet.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_1.png", // Add the path to the Goerli logo

        },
        {
          label: "Celo-Alfajores",
          chainId: "0xaef3", // Ethereum Mainnet

          rpcUrl:
            "https://celo-alfajores.infura.io/v3/5f3224c8075b407fa38911977320235b",
            logo: "./IconImage/img_frame371062_1.png", // Add the path to the Goerli logo

        },
      ],
    },
  };

  useEffect(() => {
    const web3Instance = new Web3(selectedRpcUrl);
    setWeb3(web3Instance);

    // Request account access
    if (window.ethereum) {
      window.ethereum
        .enable()
        .then((accounts: string | any[]) => {
          if (accounts.length > 0) {
            const address = accounts[0];
            setUserAddress(address);
            console.log("User Address:", address);
          } else {
            console.error("No accounts found.");
          }
        })
        .catch((error: any) => {
          console.error("Error fetching user address:", error);
        });
    }
  }, [selectedRpcUrl]);

  // Handle mainnet network change
  const handleMainnetNetworkChange = (value: string) => {

    const newSelectedMainnetNetwork = value;
    const newSelectedMainnetRpcUrl = networkOptions.mainnet.options.find(
      (option) => option.label === newSelectedMainnetNetwork
    )?.rpcUrl;
    const newSelectedMainnetCHainId = networkOptions.mainnet.options.find(
      (option) => option.label === newSelectedMainnetNetwork
    )?.chainId;

    setSelectedMainnetNetwork(newSelectedMainnetNetwork);

    if (newSelectedMainnetRpcUrl) {
      setSelectedRpcUrl(newSelectedMainnetRpcUrl);
      console.log("selectedRpcUrl:", newSelectedMainnetRpcUrl);
      console.log("selectedNetwork:", newSelectedMainnetNetwork);

      connectToNetwork(newSelectedMainnetCHainId);
    }
  };

  // Handle testnet network change
  const handleTestnetNetworkChange = (value: string) => {
    const newSelectedTestnetNetwork = value;
    const newSelectedTestnetRpcUrl = networkOptions.testnet.options.find(
      (option) => option.label === newSelectedTestnetNetwork
    )?.rpcUrl;
    setSelectedTestnetNetwork(newSelectedTestnetNetwork);

    const newSelectedTestnetchainID = networkOptions.testnet.options.find(
      (option) => option.label === newSelectedTestnetNetwork
    )?.chainId;

    if (newSelectedTestnetRpcUrl) {
      setSelectedRpcUrl(newSelectedTestnetRpcUrl);
      console.log("selectedRpcUrl:", newSelectedTestnetRpcUrl);
      console.log("selectedNetwork:", newSelectedTestnetNetwork);
      setChainId(newSelectedTestnetNetwork); // Set the chainId based on the selected network

      connectToNetwork(newSelectedTestnetchainID);
    }
  };

  const connectToNetwork = async (chainId: string) => {
    if (window.ethereum) {
      try {
        // Request to switch to the desired network
        await window.ethereum.request({
          method: "wallet_switchEthereumChain",
          params: [{ chainId }], // Pass the desired chainId to switch to
        });

        // Network switch was successful
        console.log("Switched to the desired network.");

        // You can add additional logic here to handle the switched network
        // For example, you can update the user interface or perform network-specific tasks.
      } catch (error) {
        // Handle errors, e.g., user rejected the request or the network switch failed
        console.error("Error switching network:", error);
      }
    } else {
      // Ethereum provider not available (e.g., MetaMask not installed)
      console.error("Ethereum provider not available.");
    }
  };
    


  const navigate = useNavigate();
  const [formData, setFormData] = useLaunchPadForm();

  const { control, handleSubmit } = useForm<LaunchPadFormData>({
    defaultValues: formData,
    resolver: zodResolver(LaunchPadFormSchema),
  });

  const onSubmit = (data: LaunchPadFormData) => {
    setFormData(data);
  };
 
  async function deployToken() {

   

    if (!name || !symbol || !totalSupply ) {
      console.error(
        "Please provide valid values for tokenName, tokenSymbol, initialSupply"
      );
      return;
    }


   
  const web3Instance = new Web3(selectedRpcUrl);
  setWeb3(web3Instance);

  if (window.ethereum) {
    const accounts = await window.ethereum.enable();

    window.ethereum
      .enable()
      .then((accounts: string | any[]) => {
        if (accounts.length > 0) {
          const address = accounts[0];
          setUserAddress(address);
          console.log("User Address stage 2:", address);
        } else {
          console.error("No accounts found. (step2)");
        }
      })
      .catch((error: any) => {
        console.error("Error fetching user address:", error);
      });
  }

 
 
  const MyTokenContractData =
    "";
  const contractAddress = "0xf8e81D47203A594245E36C48e151709F0C19fBe8"; // Replace with your contract address

  const convertToAbiItemArray = (abi: any) => {
    if (Array.isArray(abi)) {
      return abi;
    } else if (abi && typeof abi === "object") {
      return [abi];
    }
    return [];
  };
  const abiArray = convertToAbiItemArray(MyTokenContractABI);

  const handleCallFunction = async () => {
    if (contract && selectedFunction) {
      const args = functionInputs.map((input) => input.value);
      try {
        const result = await contract.methods[selectedFunction.name](...args).call();
        const outputs = selectedFunction.outputs.map((output, index) => ({
          name: output.name,
          type: output.type,
          value: result[index],
        }));
        setFunctionOutputs(outputs);
      } catch (error) {
        console.error('Error calling function:', error);
      }
    }
  };
  
 
  // Convert nonce to hexadecimal
  const accounts = await window.ethereum.request({
    method: "eth_requestAccounts",
  });
  const userAddress = accounts[0]; // Get the user's address
  const contractArguments: any[] = [
    accounts[0],
  name,
  symbol,
 
];
  console.log("accounts:", accounts);
  console.log("userAddress:", userAddress);

  // Prepare the transaction object
  const contract = new web3.eth.Contract(abiArray);
  console.log("contract:", contract);

  const deployData = contract
    .deploy({
      data: MyTokenContractData,
      arguments: contractArguments,
    })
    .encodeABI();
  console.log("deployData:", deployData);

  const gasPriceWei = await web3.eth.getGasPrice();
  console.log("Estimated gasPriceWei:", gasPriceWei);
  
  const gasPrice = gasPriceWei;
  console.log("Gas Price (Gwei):", gasPrice);
  
  // Remove the fixed gas limit
  // const gasLimit = 1335010;
  
  // Use estimateGas for gas limit calculation
  const gasLimit = await contract
    .deploy({
      data: MyTokenContractData,
      arguments: contractArguments,
    })
    .estimateGas();

  const nonce = await web3.eth.getTransactionCount(userAddress);
  const rawTx = {
    nonce: web3.utils.toHex(nonce),
    gasPrice: web3.utils.toHex(gasPrice),
    gasLimit: web3.utils.toHex(gasLimit),
    data: deployData,
    from: userAddress,
  };
  console.log("rawTx:", rawTx);

  const signedTx = await window.ethereum.request({
    method: "eth_sendTransaction",
    params: [
      {
        from: userAddress,
        to: null, // For contract deployment, set 'to' as null
        gas: rawTx.gasLimit,
        gasPrice: rawTx.gasPrice,
        nonce: rawTx.nonce,
        data: rawTx.data,
      },
    ],
  });

  console.log("Transaction Hash:", signedTx);

  // Send the transaction using MetaMask

  async function waitForReceipt(txHash: Bytes, maxRetries = 60) {
    let retries = 0;
    while (retries < maxRetries) {
      try {
        const receipt = await web3.eth.getTransactionReceipt(txHash);
        if (receipt) {
          return receipt;
        }
        await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again
      } catch (error) {
        console.error("Error while waiting for receipt:", error);
        await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again
      }
      retries++;
    }
    throw new Error("Transaction not mined within the expected time.");
  }

  // After sending the transaction
  const receipt = await waitForReceipt(signedTx, 60); // Wait for a maximum of 60 seconds
  if (receipt && receipt.contractAddress) {
    console.log("Contract deployed at address:", receipt.contractAddress);

    const newToken = {
      name: name,
      symbol: symbol,
      hash: signedTx,
      address: receipt.contractAddress,
      walletAddress: userAddress,
      category: "ERC20Advance",
    };

    // Update the list of deployed tokens


    axios.post('http://localhost:5004/api/saveDeployedTokens', { newToken })
    .then(response => {
      console.log(response.data);
    })
    .catch(error => {
      console.error(error);
    });


    // Retrieve data from the server based on category and walletAddress
const category = 'ERC20Advance'; // Replace with the desired category
const walletAddress = userAddress; // Replace with the user's wallet address

axios.get(`http://localhost:5004/api/getDeployedTokens?category=${category}&walletAddress=${walletAddress}`)
  .then(response => {
    const storedTokens = response.data.deployedTokens;
    console.log(storedTokens);
    setDeployedTokens(response.data.deployedTokens);

  })
  .catch(error => {
    console.error(error);
  });

   

  } else {
    console.log(
      "Transaction mined, but contract address not available yet."
    );
  }




  
  }
 
    
  
 

  return (

    <> 
<div>
      <Title>Mainnet or Testnet:</Title>

      <StyledSelect
      placeholder="Select Network"
        value={selectedNetwork}
        onChange={(e) => setSelectedNetwork(e.target.value)}
        label="Mainnet or Testnet"
      >
        <StyledMenuItem placeholder="Select Netowork" value={null}>Select...</StyledMenuItem>
        <StyledMenuItem value="mainnet">Mainnet</StyledMenuItem>
        <StyledMenuItem value="testnet">Testnet</StyledMenuItem>
      </StyledSelect>
    </div>

    {selectedNetwork === 'mainnet' && (
      <div>
        <Title1>Mainnet:</Title1>
        <StyledSelect
        placeholder=""
          value={selectedMainnetNetwork}
          label="Mainnet"
        >
          {networkOptions.mainnet.options.map((opt) => (
            <StyledMenuItem key={opt.label} placeholder="Mainnet" value={opt.label} onClick={(e) => handleMainnetNetworkChange(opt.label)}
            >
              <img src={opt.logo} alt={`${opt.label} Logo`} style={{ width: '20px', marginRight: '5px' }} />
              {opt.label}
            </StyledMenuItem>
          ))}
        </StyledSelect>
      </div>
    )}

    {selectedNetwork === 'testnet' && (
      <div>
        <Title1>Testnet:</Title1>
        <StyledSelect
          id="testnetSelect"
          value={selectedTestnetNetwork}
          label="Testnet"
        >
          {networkOptions.testnet.options.map((opt) => (
            <StyledMenuItem key={opt.label} value={opt.label}   onClick={(e) => handleTestnetNetworkChange(opt.label)}
            >
              <img src={opt.logo} alt={`${opt.label} Logo`} style={{ width: '20px', marginRight: '5px' }} />
              {opt.label}
            </StyledMenuItem>
          ))}
        </StyledSelect>
      </div>
    )}

    <Form onSubmit={handleSubmit(onSubmit)}>



  
        <Section>
        


          <Title>ERC20 Advance</Title>




          <div>
        <Title1>Token Deployment</Title1>
        <Wrapper>
        <Input type="text" placeholder="Name" value={name} onChange={(e: { target: { value: any; }; }) => setName(e.target.value)} />
        <Input type="text" placeholder="Symbol" value={symbol} onChange={(e: { target: { value: any; }; }) => setSymbol(e.target.value)} />
       <Input type="number" placeholder="Total Supply" value={totalSupply} onChange={(e: { target: { value: any; }; }) => setTotalSupply(e.target.value)} />
        
       
</Wrapper>       
        <Submit onClick={deployToken}>Deploy</Submit>
      </div>
      <div>
      <Title>Deployed Token</Title>
      {deployedTokens
          .filter((token) => token.walletAddress === userAddress) // Filter tokens by wallet address
          .map((token, index) => (
            <div key={index}>
              <p>Name: {token.name}</p>
              <p>Symbol: {token.symbol}</p>
              <p>Hash: {token.hash}</p>
              <p>Contract Address: {token.address}</p>
              <p>Wallet Address: {token.walletAddress}</p>
              <hr />
            </div>
          ))}
    </div>  
 

       
        </Section>

        <div>
      <Title>Select Token:</Title>
      <StyledSelect
      placeholder="Select Token"
        value={selectedToken ? selectedToken.address : ""}
        onChange={(e) => {
          const selected = deployedTokens.find(
            (token) => token.address === e.target.value
          );
          handleSelectToken(selected);
        }}
      >
        <option value="" disabled>
          Select a token
        </option>
        {deployedTokens.map((token) => (
          <option key={token.address} value={token.address}>
            {token.name} - {token.address}
          </option>
        ))}
      </StyledSelect>
    </div>

    {selectedToken && (
      
        <Section>
        <Title1>Functionality</Title1>

        {/* List READ functions */}
        <div>
          <Title>READ Functions</Title>
          {abiArray
            .filter((func) => func.stateMutability === 'view')
            .map((func, index) => (
              <Button key={index} onClick={() => handleSelectFunction(func)}>
                {func.name}
              </Button>
            ))}
        </div>

        {/* List WRITE functions */}
        <div>
          <Title>WRITE Functions</Title>
          {abiArray
            .filter((func) => func.stateMutability === 'nonpayable')
            .map((func, index) => (
              <Button key={index} onClick={() => handleSelectFunction(func)}>
                {func.name}
              </Button>
            ))}
        </div>

        {/* List EVENT functions */}
        <div>
          <Title>EVENT Functions</Title>
          {abiArray
            .filter((func) => func.type === 'event')
            .map((func, index) => (
              <Button key={index} onClick={() => handleSelectFunction(func)}>
                {func.name}
              </Button>
            ))}
        </div>

        {/* Inputs and Call Button */}
        {selectedFunction && (
  <div>
    <Title>Function Inputs</Title>
    {functionInputs.map((input, index) => (
      <div key={index}>
        <input
          type="text"
          placeholder={`${input.name} (${input.type})`}
          value={input.value}
          onChange={(e) => {
            const newInputs = [...functionInputs];
            newInputs[index].value = e.target.value;
            setFunctionInputs(newInputs);
          }}
        />
      </div>
    ))}
    <Button onClick={handleCallFunction}>Call Function</Button>
  </div>
)}

{/* Outputs */}
{functionOutputs.length > 0 && (
  <div>
    <Title>Function Outputs</Title>
    {functionOutputs.map((output, index) => (
      <div key={index}>
        <p>
          {output.name}: {output.value.toString()}
        </p>
      </div>
    ))}
    {/* Add a button or trigger to log the rendered HTML */}
 
  </div>
)}
      </Section>)}
      </Form></>
  );
}

const Wrapper = styled.div`
  display: flex;
  flex-direction: column;
  gap: 10px;
`;



const Input = styled.input`
  ${FormInputStyle}
`;






const Form = styled.form`
  display: flex;
  flex-direction: column;
  border-radius: 8px;
`;
const StyledSelect = styled(Select)`
  
    min-width: 200px;
    margin-right: 30px;
    background: var(--black2);
    color: var(--white);
    font-size: 16px;
    font-weight: 600;
    line-height: 32px;
    letter-spacing: 1px;
    
    border: var(--white);

  

`;

const StyledMenuItem = styled(MenuItem)`
display: flex;
min-width: 200px;
margin-right: 30px;
background: var(--white);
color: var(--black);
border: var(--white);

font-size:  16px;
  font-weight: 600;
  line-height: 32px;
  letter-spacing: 1px;
`;
const Section = styled.section`

  display: flex;
  flex-direction: column;
  gap: 30px;
  padding: 30px 32px;
  background: var(--black2);

  ${media.sm} {
    padding-inline: 10px;
  }
`;

const Title = styled.h1`
  color: var(--white);
  font-size: 20px;
  font-weight: 800;
  line-height: 32px;
  letter-spacing: 1px;
  text-transform: capitalize;
  margin-block-end: 10px;
  gap: 20px;
`;

const Title1 = styled.h3`
  color: var(--blue);
  font-size: 20px;
  font-weight: 600;
  line-height: 32px;
  letter-spacing: 1px;
  text-transform: capitalize;
  margin-block-end: 10px;
`;

const Submit = styled(Button)`
  color: var(--white);
  font-size: 16px;
  font-weight: 600;
  line-height: 25.6px;
  letter-spacing: 0.8px;
  padding: 8px 16px;
  width: max-content;
  border-radius: 4px;
  border: none;
  background: var(--gradient1);
  cursor: pointer;
  margin: 30px 0 0 auto;
`;



